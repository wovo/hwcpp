// AVR has no <ratio>

namespace std {

template< class T, T v >
struct integral_constant {};

template < bool B >
using bool_constant = integral_constant< bool, B >;

using true_type  = integral_constant< bool, true >;
using false_type = integral_constant< bool, false >;

template< class T, class U >
struct is_same : false_type {};
 
template< class T >
struct is_same< T, T > : true_type {};

template< class T > struct remove_reference      { typedef T type; };
template< class T > struct remove_reference<T&>  { typedef T type; };
template< class T > struct remove_reference<T&&> { typedef T type; };

template< class T >
using remove_reference_t = typename remove_reference< T >::type;

}; // namespace std